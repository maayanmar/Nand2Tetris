// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int length, stringSize;
    field Array charsArray;
    static int factorToString, factorToInt;
    

    /** constructs a new empty string with a maximum length
     * of maxLength and initial length of 0. */
    constructor String new (int maxLength) {
        let maxLength = Math.max(maxLength, 1);
        let stringSize = maxLength;
        let charsArray = Array.new(maxLength);
        let length = 0;
        let factorToString = 48;
        let factorToInt = -48;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charsArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charsArray[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < stringSize) {
            let charsArray[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, c;
        var boolean isNegative;
        let val = 0;
        let i = 0;
        let isNegative = false;
        if (charsArray[0] = 45) {   // '-' ASCII number is 45.
            let isNegative = true;
            let i = 1;
        }
        let c = charsArray[i] + factorToInt;
        while((i < length) & ((~(0 > c)) & (c < 10))) {
            let val = (val * 10) + c;
            let i = i + 1;
            let c = charsArray[i] + factorToInt;
        }
        if (isNegative) {
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        //clear string first
        let length = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);      // '-' ASCII number is 45.
        }
        do intHelper(val);
        return;
    }
    

    /** Helper method for setInt. */
    method void intHelper(int val) {
        var int alpha, valMod;
        if (val < 10) {
            do appendChar(val + factorToString);
        } else {
            let alpha = val / 10;   // save alpha to avoid repeating division
            do intHelper(alpha);
            let valMod = val - (alpha * 10);   // calculate the the last digit val % 10
            do appendChar(valMod + factorToString);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
