// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean curColor;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ^16384;
        let screen = 16384;
        do Screen.setColor(true);
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) { 
            let screen[i] = false; 
            let i = i + 1;
        }
        return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let curColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int bit, xMod;
        let bit = (^^^^^y) + (####x);
        let xMod = x & 15;
        if (curColor) {
            let screen[bit] = screen[bit] | twoToThe[xMod]; 
        } else {
            let screen[bit] = screen[bit] & ~twoToThe[xMod]; 
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, xDir, yDir, a, b, absA, absB, diff;
        let dy = Math.abs(y1 - y2);
        let dx = Math.abs(x1 - x2);

        // Handle Simple Cases
        if (dx = 0) {
            do Screen.drawVerLine(Math.min(x1, x2), Math.min(y1, y2), dy);
            return; 
        } if (dy = 0) {
            do Screen.drawHorLine(Math.min(x1, x2), Math.min(y1, y2), dx);
            return; 
        }

        // Handle General Cases with Bresenham's Algorithm
        let xDir = 1;
        let yDir = 1;
        if (x1 > x2) { let xDir = -1;}
        if (y1 > y2) { let yDir = -1;}

        let a = 0;
        let b = 0;
        let absA = 0;
        let absB = 0;
        
        while(~(absA > dx) & ~(absB > dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + xDir;
                    let absA = absA + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + yDir;
                    let absB = absB + 1;
                    let diff = diff - dx;
                }
            }
        return;
    }

    /** This function draws Horizontal line */
    function void drawHorLine(int x, int y, int length) {
        var int i;
        let i = 0; 
        while (~(i > length)) { 
            // Handle whole bit drawing efficiently
            if (((x + i) & 15) = 0) {
                while (i < (length - 16)) {
                    do Screen.drawWholeBit(x + i, y);
                    let i = i + 16;
                }   
            }
            do Screen.drawPixel(x + i, y);
            let i = i + 1;
        }
        return;
    }
    /** This function draws a whole bit, used for saving running time*/
    function void drawWholeBit(int x, int y) {
        let screen[(^^^^^y) + (####x)] = curColor;
        return;
    }

    /** This function draws a vertical line */
    function void drawVerLine(int x, int y, int length) {
        var int i, bit, xMod;
        let i = 0; 
        let bit = (^^^^^y) + (####x);
        let xMod = x & 15;
        while (~(i > length)) {
            if (curColor) {
                let screen[bit] = screen[bit] | twoToThe[xMod]; 
            } else {
                let screen[bit] = screen[bit] & ~twoToThe[xMod]; 
            }
            let bit = bit + 32;
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawHorLine(x1, y1, x2 - x1);
            let y1 = y1+ 1;
        }
        return;
    }

    /** Draws a filled circle of radius r <= 181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, rSquared;
        let dy = -r;
        let rSquared = r * r;
        while( ~(dy > r) ) {
            let dx = Math.sqrt((rSquared) - (dy * dy));
            do Screen.drawHorLine(x - dx, y + dy, ^dx);
            let dy = dy + 1;
        }
        return;
    }

}