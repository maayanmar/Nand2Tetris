// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 


/**
 *        free block structure    |   allocated block structure
 *               ________                    ________
 *  pointer ->  |__size__|                  |__size__|  
 *              |__next__|      pointer ->  |........|
 *              |........|                  |..allo..|
 *              |........|                  |........|
 *              |________|                  |________|
 *
*/

class Memory {

    // Static variables:                                                            
    static Array RAM, freeList;
    // RAM = The RAM memory, used to access the memory using RAM[address].
    // freeList = The pointer to the first free block.

    // Static CONSTANSTS:
    static int SIZE, NEXT, ALLOC_SIZE; 
    // SIZE = Index to The block size.  
    // NEXT = Index to the pointer of the next block.              
    // ALLOC_SIZE = Index to the block allocated size. 

    /** Initializes memory parameters. */
    function void init() {

        let RAM = 0;

        let ALLOC_SIZE = -1;
        let SIZE = 0;
        let NEXT = 1;

        let freeList = 2048;
        let freeList[SIZE] = 14336;
        let freeList[NEXT] = null; 
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** This function finds the first segment to allocate(size) */
    function Array firstFit(int size) {
        var Array curSegment;

        let curSegment = freeList;
        while (~(curSegment = null)) {
            if (~(curSegment[SIZE] < (size + 3))) {
                return curSegment;
            }
            let curSegment = curSegment[NEXT];
        }
      return null;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {

        var Array foundSegment, nextSegment, allocatedBlock;

        let foundSegment = Memory.firstFit(size);

        if (~(foundSegment = null)) {
            let allocatedBlock = foundSegment + (foundSegment[SIZE] - size);  // allocate the lower part of the segment
            let allocatedBlock[ALLOC_SIZE] = size + 1;                        // set the allocated size
            let foundSegment[SIZE] = foundSegment[SIZE] - (size + 1);         // update the size
          
        } else {

            //do Memory.defrag();                       // WE IMPLEMENTED DEFRAG AS RECCOMENDED IN THE LECTURES 
            let foundSegment = Memory.firstFit(size);  // WE WILL NOT CALL IT IN CASE OF UNKONWN TESTS FAILURES

            if (~(foundSegment = null)) {
              return Memory.alloc(size);

            } else {
                return -1;
            }
        }
        return allocatedBlock;
        }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array oSegment;
        if (o = -1) { return; }
        let oSegment = o - 1;  // get the block segment
        let oSegment[NEXT] = freeList;
        let freeList = oSegment;
        return;
    }


    /** Returns the minimal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max (Array o) {
        var int maxEle, oLength, i;
        let maxEle = o[0];
        let oLength = o[ALLOC_SIZE];
        let i = 1;
        while (i < oLength) {
            if (o[i] > maxEle) {
                let maxEle = o[i];
            }
            let i = i + 1;
        }
        return maxEle;
    }

    function void defrag() {
        var Array curBlock, nextBlock, curPointer, prevPointer;

        let curBlock = freeList;
        while (~(curBlock = null)) {
            let nextBlock = curBlock + curBlock[SIZE];      // the next segment after curBlock
            let prevPointer = freeList - 1;                 // to allow prevPointer[NEXT] = freeList 
            let curPointer = freeList;

            while (~(curPointer = null)) {
                if (curPointer = nextBlock) {

                    let curBlock[SIZE] = curBlock[SIZE] + nextBlock[SIZE];
                    let prevPointer[NEXT] = curPointer[NEXT];
                    let nextBlock = curBlock + curBlock[SIZE];
                    let prevPointer = freeList - 1;         // reset freeList iterating
                    let curPointer = freeList;

                } else {
                    let prevPointer = curPointer;
                    let curPointer = curPointer[NEXT];
                }
            }
            let curBlock = curBlock[NEXT];
        }
        return;
    }


}

     