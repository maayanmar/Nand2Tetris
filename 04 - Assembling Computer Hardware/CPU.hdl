// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // ********************* UPPER CPU HARDWARE ******************** //

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=aRegIn); // -----------------------------------.
                                                   //                                                      |
    // A been loaded if instruction[5] = 1 (C-instruction A=*) || instruction[15] = 0  (A-instruction)     |
        Not(in=instruction[15], out=l1);           //                                                      |
        And(a=instruction[15], b=instruction[5], out=l2);  //                                              |
        Or(a=l1, b=l2, out=loadA);                 //                                                      |
                                                   //                                                      |  
    ARegister(in=aRegIn, load=loadA, out=aRegOut, out[0..14]=addressM); // ------------------------------. |
                                                   //                                                    | |             
    // D register load if instruction[15] (C-instruction) && instruction[4] (conserning D=*)             | |
        And(a=instruction[15], b=instruction[4], out=loadD);  //                                         | |  
                                                  //                                                     | |
    DRegister(in=ALUout, load=loadD, out=dRegOut);// =============================================.----. | |
                                                             //                                   |    | | |
    // CentralMUX select M if instruction[12] (C-instruction) && instruction[15] (conserning M)   |    | | |
        And(a=instruction[12], b=instruction[15], out=CentralMUXsel);  //                         |    | | |
                                                             //                                   |    | | |
    Mux16(a=aRegOut, b=inM, sel=CentralMUXsel, out=CentralMuxOut); // ============================O====O=O |
                                                                   //                             |    | | |                        
                                                                   //                             |    | | |                          
    // ALU =======================================================================================O----O-* | 
    ALU(x=dRegOut, y=CentralMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], //      |   |
        ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);//=O---*

    // WriteM if instruction[15] (C-instruction) && instruction[3] (conserning M=*)
    And(a=instruction[15], b=instruction[3], out=writeM);

    // ********************* LOWER CPU HARDWARE ******************** //

    
    // PC is loaded only if it is an C-instruction and JUMP is true
        And(a=instruction[15], b=JUMP, out=loadPC);
    PC(in=aRegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    // JUMP CONDITIONS
    Mux8Way(a=false, b=JGT, c=zr    , d=JGE, e=ng, f=notzr, g=JLE, h=true, sel=instruction[0..2], out=JUMP);
    
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    // null <=> false // JGT 
        And(a=notzr, b=notng, out=JGT);
    // JEQ <=> zr // JGE
        Or(a=JGT, b=zr, out=JGE);
    // JLT <=> ng // JNE <=> notzr // JLE
        Or(a=ng, b=zr, out=JLE);
    // JMP <=> true

}   